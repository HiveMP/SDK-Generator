diff --git a/CMakeLists.txt b/CMakeLists.txt
index 490cc19ef..6d37fdc88 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -45,11 +45,9 @@ include(Macros)
 include(CMakeDependentOption)
 include(CheckCCompilerFlag)
 
-project( CURL C )
-
 message(WARNING "the curl cmake build system is poorly maintained. Be aware")
 
-file (READ ${CURL_SOURCE_DIR}/include/curl/curlver.h CURL_VERSION_H_CONTENTS)
+file (READ ${CURL_CURRENT_SOURCE_DIR}/include/curl/curlver.h CURL_VERSION_H_CONTENTS)
 string (REGEX MATCH "#define LIBCURL_VERSION \"[^\"]*"
   CURL_VERSION ${CURL_VERSION_H_CONTENTS})
 string (REGEX REPLACE "[^\"]+\"" "" CURL_VERSION ${CURL_VERSION})
@@ -71,7 +69,7 @@ set(OPERATING_SYSTEM "${CMAKE_SYSTEM_NAME}")
 set(OS "\"${CMAKE_SYSTEM_NAME}\"")
 
 include_directories(${PROJECT_BINARY_DIR}/include/curl)
-include_directories( ${CURL_SOURCE_DIR}/include )
+include_directories( ${CURL_CURRENT_SOURCE_DIR}/include )
 
 option(CURL_WERROR "Turn compiler warnings into errors" OFF)
 option(PICKY_COMPILER "Enable picky compiler options" ON)
@@ -966,7 +964,7 @@ endif(HAVE_FILE_OFFSET_BITS)
 check_type_size("off_t"  SIZEOF_OFF_T)
 
 # include this header to get the type
-set(CMAKE_REQUIRED_INCLUDES "${CURL_SOURCE_DIR}/include")
+set(CMAKE_REQUIRED_INCLUDES "${CURL_CURRENT_SOURCE_DIR}/include")
 set(CMAKE_EXTRA_INCLUDE_FILES "curl/system.h")
 check_type_size("curl_off_t"  SIZEOF_CURL_OFF_T)
 set(CMAKE_EXTRA_INCLUDE_FILES "")
@@ -1118,8 +1116,8 @@ endif(MSVC)
 # Ugly (but functional) way to include "Makefile.inc" by transforming it (= regenerate it).
 function(TRANSFORM_MAKEFILE_INC INPUT_FILE OUTPUT_FILE)
   file(READ ${INPUT_FILE} MAKEFILE_INC_TEXT)
-  string(REPLACE "$(top_srcdir)"   "\${CURL_SOURCE_DIR}" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})
-  string(REPLACE "$(top_builddir)" "\${CURL_BINARY_DIR}" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})
+  string(REPLACE "$(top_srcdir)"   "\${CURL_CURRENT_SOURCE_DIR}" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})
+  string(REPLACE "$(top_builddir)" "\${CURL_CURRENT_BINARY_DIR}" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})
 
   string(REGEX REPLACE "\\\\\n" "!π!α!" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})
   string(REGEX REPLACE "([a-zA-Z_][a-zA-Z0-9_]*)[\t ]*=[\t ]*([^\n]*)" "SET(\\1 \\2)" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})
@@ -1138,7 +1136,7 @@ else()
 endif()
 
 if(USE_MANUAL)
-  add_subdirectory(docs)
+  # add_subdirectory(docs)
 endif()
 
 add_subdirectory(lib)
@@ -1262,9 +1260,9 @@ set(REQUIRE_LIB_DEPS        "no")
 set(VERSIONNUM              "${CURL_VERSION_NUM}")
 
 # Finally generate a "curl-config" matching this config
-configure_file("${CURL_SOURCE_DIR}/curl-config.in"
-               "${CURL_BINARY_DIR}/curl-config" @ONLY)
-install(FILES "${CURL_BINARY_DIR}/curl-config"
+configure_file("${CURL_CURRENT_SOURCE_DIR}/curl-config.in"
+               "${CURL_CURRENT_BINARY_DIR}/curl-config" @ONLY)
+install(FILES "${CURL_CURRENT_BINARY_DIR}/curl-config"
         DESTINATION bin
         PERMISSIONS
           OWNER_READ OWNER_WRITE OWNER_EXECUTE
@@ -1272,9 +1270,9 @@ install(FILES "${CURL_BINARY_DIR}/curl-config"
           WORLD_READ WORLD_EXECUTE)
 
 # Finally generate a pkg-config file matching this config
-configure_file("${CURL_SOURCE_DIR}/libcurl.pc.in"
-               "${CURL_BINARY_DIR}/libcurl.pc" @ONLY)
-install(FILES "${CURL_BINARY_DIR}/libcurl.pc"
+configure_file("${CURL_CURRENT_SOURCE_DIR}/libcurl.pc.in"
+               "${CURL_CURRENT_BINARY_DIR}/libcurl.pc" @ONLY)
+install(FILES "${CURL_CURRENT_BINARY_DIR}/libcurl.pc"
         DESTINATION lib/pkgconfig)
 
 # This needs to be run very last so other parts of the scripts can take advantage of this.
@@ -1325,3 +1323,5 @@ if(NOT TARGET uninstall)
       COMMAND ${CMAKE_COMMAND} -P
       ${CMAKE_CURRENT_BINARY_DIR}/CMake/cmake_uninstall.cmake)
 endif()
+
+set (CURL_LIBS_EXPORTED_2 ${CURL_LIBS_EXPORTED_1} PARENT_SCOPE)
\ No newline at end of file
diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index 1fabdba90..3c6a4eeba 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -69,7 +69,7 @@ endif()
 
 add_library(
   ${LIB_NAME}
-  ${CURL_USER_DEFINED_DYNAMIC_OR_STATIC}
+  OBJECT
   ${HHEADERS} ${CSOURCES}
   )
 
@@ -77,7 +77,7 @@ if(MSVC AND CURL_STATICLIB)
   set_target_properties(${LIB_NAME} PROPERTIES STATIC_LIBRARY_FLAGS ${CMAKE_EXE_LINKER_FLAGS})
 endif()
 
-target_link_libraries(${LIB_NAME} ${CURL_LIBS})
+# target_link_libraries(${LIB_NAME} ${CURL_LIBS})
 
 if(WIN32)
   add_definitions( -D_USRDLL )
@@ -108,24 +108,25 @@ if(WIN32)
   endif()
 endif()
 
-target_include_directories(${LIB_NAME} INTERFACE
-	$<INSTALL_INTERFACE:include>)
-
-install(TARGETS ${LIB_NAME}
-  EXPORT libcurl-target
-  ARCHIVE DESTINATION lib
-  LIBRARY DESTINATION lib
-  RUNTIME DESTINATION bin
-)
-
-export(TARGETS ${LIB_NAME}
-       APPEND FILE ${PROJECT_BINARY_DIR}/libcurl-target.cmake
-       NAMESPACE CURL::
-)
-
-install(EXPORT libcurl-target
-        FILE libcurl-target.cmake
-        NAMESPACE CURL::
-        DESTINATION ${CURL_INSTALL_CMAKE_DIR}
-)
+# target_include_directories(${LIB_NAME} INTERFACE
+# 	$<INSTALL_INTERFACE:include>)
+# 
+# install(TARGETS ${LIB_NAME}
+#   EXPORT libcurl-target
+#   ARCHIVE DESTINATION lib
+#   LIBRARY DESTINATION lib
+#   RUNTIME DESTINATION bin
+# )
+#
+# export(TARGETS ${LIB_NAME}
+#       APPEND FILE ${PROJECT_BINARY_DIR}/libcurl-target.cmake
+#        NAMESPACE CURL::
+# )
+# 
+# install(EXPORT libcurl-target
+#         FILE libcurl-target.cmake
+#         NAMESPACE CURL::
+#         DESTINATION ${CURL_INSTALL_CMAKE_DIR}
+# )
 
+set (CURL_LIBS_EXPORTED_1 ${CURL_LIBS} PARENT_SCOPE)
\ No newline at end of file
