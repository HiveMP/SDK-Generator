export { getSdk } from './fragments/sdk';
export { getExceptionClass } from './fragments/exception';
export { getHttpClientClass } from './fragments/httpClient';
export { getDefines } from './fragments/defines';
export { namespaceBegin, namespaceEnd } from './fragments/namespace';
export { interfacePrefix, interfaceSuffix } from './fragments/controllerInterface';
export { implementationPrefix, implementationSuffix } from './fragments/controllerImplementation';
export { 
  interfaceMethodDeclarations, 
  interfaceWebSocketMethodDeclarations,
  implementationMethodDeclarations, 
  implementationWebSocketMethodDeclarations 
} from './fragments/methods';
export { getPromiseMainThreadReturnClass, getPromiseSchedulerSettingsClass, getPromiseUnityMonoBehaviourClass, getPromiseClass, getPromiseGenericClass, getPromiseDelegateClass, getPromiseDelegateGenericClass, getPromiseSchedulerClass } from './fragments/promise';
export { getWebSocketClass } from './fragments/websocket';

export function getCodePrefix(defines: string[]) {
  return `
//------------------------
// <auto-generated>
//     Generated with HiveMP SDK Generator
// </auto-generated>
//------------------------

${defines.join("\n")}

`;
}

export function getBaseClientInterface(genericNamespace: string) {
  return `
//------------------------
// <auto-generated>
//     Generated with HiveMP SDK Generator
// </auto-generated>
//------------------------

using System;
using System.Collections.Generic;

namespace ${genericNamespace}
{
    public interface IHiveMPBaseClient
    {
        /// <summary>
        /// The API key sent in requests to HiveMP.  When calling methods that require no API key, this should
        /// be null, otherwise set it to the API key.
        /// </summary>
        string ApiKey { get; set; }
  
        /// <summary>
        /// A factory which returns the API key request on demand. You can use this
        /// property instead of ApiKey if you need to dynamically update the API key
        /// per request. If this is non-null, the value of ApiKey is ignored.
        /// </summary>
        Func<string> ApiKeyFactory { get; set; }
    
        /// <summary>
        /// If set, this handler is called to convert the native HiveMP exception into another exception.
        /// </summary>
        System.Func<${genericNamespace}.HiveMPException, System.Exception> ExceptionConverter { get; set; }

        /// <summary>
        /// The base URL for the API. This is set to production for you by default, but if want to use development or
        /// enterprise endpoints, you'll need to set this.
        /// </summary>
        string BaseUrl { get; set; }
    
        /// <summary>
        /// Called when preparing an API request; you can use this event to modify where the
        /// request is sent.
        /// </summary>
        System.Func<${genericNamespace}.RetryableHttpClient, string, string> InterceptRequest { get; set; }
    }
}
`;
}