export function getSdk(genericNamespace: string, defines: string[]) {
  const clientConnectPlatforms = [
    'Win32',
    'Win64',
    'Mac64',
    'Linux32',
    'Linux64'
  ];

  let code = `
//------------------------
// <auto-generated>
//     Generated with HiveMP SDK Generator
// </auto-generated>
//------------------------

${defines.join("\n")}

using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Collections.Generic;
using System.Linq;
#if IS_UNITY
using UnityEngine;
#endif

namespace ${genericNamespace}
{
    public static class HiveMPSDK
    {
        private static IClientConnect _clientConnect;
        private static bool _didInit;
        private static object _initLock = new object();
        private static Dictionary<long, HotpatchRef> _runningHotpatches = new Dictionary<long, HotpatchRef>();
#if IS_UNITY
        private static GameObject _hiveObject;
        private static HiveMPUnityMonoBehaviour _hiveBehaviour;
#endif

#if ENABLE_CLIENT_CONNECT_SDK
#if HAS_TASKS
        [System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]
#endif
        private static void SetupClientConnect()
        {
#if IS_UNITY
            // Unity handles the mapping of native DLLs in it's .meta files.
            _clientConnect = new ClientConnectUnityPlatform();
#elif NET35
            if (System.IO.Path.DirectorySeparatorChar == '\\\\')
            {
                // Windows
                if (System.IntPtr.Size == 8)
                {
                    // 64-bit
                    _clientConnect = new ClientConnectWin64Platform();
                }
                else
                {
                    // 32-bit
                    _clientConnect = new ClientConnectWin32Platform(); 
                }
            }
            else
            {
                if (System.IO.Directory.Exists("/Library"))
                {
                    // macOS
                    if (System.IntPtr.Size == 8)
                    {
                        // 64-bit
                        _clientConnect = new ClientConnectMac64Platform();
                    }
                    else
                    {
                        // 32-bit macOS is not supported.  32-bit support for
                        // macOS is being removed by Apple in the near future.
                    }
                }
                else
                {
                    // Linux
                    if (System.IntPtr.Size == 8)
                    {
                        // 64-bit
                        _clientConnect = new ClientConnectLinux64Platform();
                    }
                    else
                    {
                        // 32-bit
                        _clientConnect = new ClientConnectLinux32Platform();
                    }
                }
            }
#else
            if (System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.Windows))
            {
                // Windows
                if (System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture == System.Runtime.InteropServices.Architecture.X64)
                {
                    // 64-bit
                    _clientConnect = new ClientConnectWin64Platform();
                }
                else if (System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture == System.Runtime.InteropServices.Architecture.X86)
                {
                    // 32-bit
                    _clientConnect = new ClientConnectWin32Platform(); 
                }
                else
                {
                    // Other unsupported (like ARM/ARM64)
                    _clientConnect = null;
                }
            }
            else if (System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.OSX))
            {
                if (System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture == System.Runtime.InteropServices.Architecture.X64)
                {
                    // 64-bit
                    _clientConnect = new ClientConnectMac64Platform();
                }
                else
                {
                    // Other unsupported (like ARM/ARM64)
                    // 32-bit macOS is not supported.  32-bit support for
                    // macOS is being removed by Apple in the near future.
                    _clientConnect = null;
                }
            }
            else if (System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.Linux))
            {
                // Linux
                if (System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture == System.Runtime.InteropServices.Architecture.X64)
                {
                    // 64-bit
                    _clientConnect = new ClientConnectLinux64Platform();
                }
                else if (System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture == System.Runtime.InteropServices.Architecture.X86)
                {
                    // 32-bit
                    _clientConnect = new ClientConnectLinux32Platform();
                }
                else
                {
                    // Other unsupported (like ARM/ARM64)
                    _clientConnect = null;
                }
            }
            else
            {
                // Unsupported platform
                _clientConnect = null;
            }
#endif

            if (_clientConnect != null)
            {
                try
                {
                    _clientConnect.Init();
                }
                catch (System.Exception)
                {
                    // We can't use Client Connect
                    _clientConnect = null;
                }
            }

#if IS_UNITY
            // Create the Unity MonoBehaviour if needed.
            GetUnityMonoBehaviour();
#endif
        }
#endif

#if IS_UNITY
        private static bool HiveMPCertificateValidation(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors, X509Certificate2 nonSniRootCa)
        {
            // If there are no SSL errors, validation succeeds.
            if (sslPolicyErrors == SslPolicyErrors.None)
            {
                return true;
            }

            // If the sender is not a HTTPS Web Request, we can't validate whether the No SNI
            // certificate is for a HiveMP request.
            var httpWebRequest = sender as HttpWebRequest;
            if (httpWebRequest == null)
            {
                return false;
            }

            // If it's not a HiveMP request, we don't validate for it.
            if (!httpWebRequest.Address.Host.EndsWith(".hivemp.com"))
            {
                return false;
            }

            // First up, check if the chain has any statuses that are not related to CRL revocation.
            // We don't provide CRL lists for our No SNI certificate, because we're only using this
            // infrastructure to workaround Unity's poor SSL client support.
            if ((sslPolicyErrors & SslPolicyErrors.RemoteCertificateChainErrors) != 0)
            {
                var hasUnexpectedChainElementsValidationError = false;
                for (var i = 0; i < chain.ChainElements.Count; i++)
                {
                    var element = chain.ChainElements[i];
                    for (var s = 0; s < element.ChainElementStatus.Length; s++)
                    {
                        var chainStatus = element.ChainElementStatus[s];
                        if (chainStatus.Status != X509ChainStatusFlags.OfflineRevocation &&
                            chainStatus.Status != X509ChainStatusFlags.RevocationStatusUnknown)
                        {
                            hasUnexpectedChainElementsValidationError = true;
                        }
                    }
                }
                if (!hasUnexpectedChainElementsValidationError)
                {
                    sslPolicyErrors &= ~SslPolicyErrors.RemoteCertificateChainErrors;
                }
            }

            // If the remote name has a mismatch, check if the root CA for the provided
            // certificate is the Redpoint No SNI Root CA. We already know the request
            // is for *.hivemp.com due to previous checks.
            if ((sslPolicyErrors & SslPolicyErrors.RemoteCertificateNameMismatch) != 0)
            {
                var lastChainElement = chain.ChainElements[chain.ChainElements.Count - 1].Certificate;
                if (nonSniRootCa.Thumbprint == lastChainElement.Thumbprint)
                {
                    sslPolicyErrors &= ~SslPolicyErrors.RemoteCertificateNameMismatch;
                }
            }

            return sslPolicyErrors == SslPolicyErrors.None;
        }

        internal static HiveMPUnityMonoBehaviour GetUnityMonoBehaviour()
        {
            if (_hiveObject == null)
            {
                _hiveObject = new GameObject();
                _hiveBehaviour = _hiveObject.AddComponent<HiveMPUnityMonoBehaviour>();
            }

            return _hiveBehaviour;
        }
#endif

        internal static IClientConnect ClientConnect
        {
            get { return _clientConnect; }
        }

        internal static void EnsureInited()
        {
            if (!_didInit)
            {
                lock (_initLock)
                {
#if IS_UNITY
                    var nonSniRootCa = new X509Certificate2(System.Convert.FromBase64String(@"
MIIGNjCCBB6gAwIBAgIJAIFAzu/SSMPWMA0GCSqGSIb3DQEBCwUAMIGnMQswCQYD
VQQGEwJBVTERMA8GA1UECAwIVmljdG9yaWExHzAdBgNVBAoMFlJlZHBvaW50IEdh
bWVzIFB0eSBMdGQxPDA6BgNVBAsMM1JlZHBvaW50IEdhbWVzIFB0eSBMdGQgTm8t
U05JIENlcnRpZmljYXRlIEF1dGhvcml0eTEmMCQGA1UEAwwdUmVkcG9pbnQgR2Ft
ZXMgTm8tU05JIFJvb3QgQ0EwHhcNMTgwMjE2MDQwNTE0WhcNMzgwMjExMDQwNTE0
WjCBpzELMAkGA1UEBhMCQVUxETAPBgNVBAgMCFZpY3RvcmlhMR8wHQYDVQQKDBZS
ZWRwb2ludCBHYW1lcyBQdHkgTHRkMTwwOgYDVQQLDDNSZWRwb2ludCBHYW1lcyBQ
dHkgTHRkIE5vLVNOSSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxJjAkBgNVBAMMHVJl
ZHBvaW50IEdhbWVzIE5vLVNOSSBSb290IENBMIICIjANBgkqhkiG9w0BAQEFAAOC
Ag8AMIICCgKCAgEA0rFk0tWyHoustnvIjaD4DK9eiSelMzei03vyJHwzGvr3Gb8q
xP0rotPFDPtP3OQD9mHkvfN44pxKJhulT7bGYqvHp1uB6/gDfjdK7etKI6pY3NeE
Vv+sflsc+bHJ0JAHuMJUA439qeekhHg+85W7IIOGhul0V2Onm9sg0hfmai7+xy28
bgxiw3aWuywl+3+fqFSJGWmtkkTHqN9FCiil6KSwcfa6GIiHk140PRsV4O4XtuFs
B0XUbhwG//6w7VfCPHDhtzmrDMTbPrQq8M6CUdp5cH8CrN48nSpw0mrt+ILF0qR9
t6CQXx2e9CebWFYEEiqDLJtFnO/gDiaQPhZTs1M0PQ4Q5L2VUQajLjxbEcWGo0FH
etoatE+p7So4lZGHD1pSlau91kgkkkP38TynyozGvLyND3eWmfNa0Qfb7YQma0Nl
O6ezYZs4RNPE+P1lZsY/9+3KpnlWRHVfEp8VjEGBdJnpwUcs+Ys9qpS5Fs0yvCqY
HEUuzgrfaOyl0F9A9WXD3rFZI1KWh7olbF5oV+c7o996r0VSMJ3XPKC72iWGONux
ddtFcGBRtIASZSkPuFNfOl2ARjqOAcy3//6XLX2nHW9YwDo+FEJhnR26tk5VpfmW
t/qMQ+BUmBPer+HYCtv2lSss/hxAxaiToo1IiVhQ4/XEQZgasa7I9neSR3kCAwEA
AaNjMGEwHQYDVR0OBBYEFPZeVoLdOgtxffUhY3fEcO6oKD8nMB8GA1UdIwQYMBaA
FPZeVoLdOgtxffUhY3fEcO6oKD8nMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/
BAQDAgGGMA0GCSqGSIb3DQEBCwUAA4ICAQBr+gv2FNFFDsM1TsdrP0Featjc41pI
iN/zRA5+UMSx8svIoQ68GDbcAC1jm96yxkjcn5TkUQknpwP7vo2GzO6+bPz4zbKZ
TYOn8oxuxAAvXm/+1YfSGNnuC5U+yPyg5cl8PhOuZgBlGXXhHi7e7bvyPzlHq9Ni
5BcsHiGYho8eTNbRRWVdmE+NA9ievyLP/sFiYbvJiEfprSMI5z2SwQF6PE2q9/DD
2BH9SLn+xf2NdVoGah76/ucbEou0XNzE66I8cQa/VNjm4Ks+iRBO4e2TVW+eMpQd
/JAvsv7eEgaOaadJL82dHIzG1lLh6KS+jIQF2lRfRtA7DSG4R6LBIMKltLdF7gyr
m8dChiCLeovbiLGch4qGohVTRfxCL4u8xmQKaftuuDJXZsEXEm8ihkvy6AoyAR7W
W0953oCT0ydWCF8C6FhBUSdkDBzctk/rdUdbpNmK4OzUsx9pnAfya1FRpjylh4KS
ZDottbiPxLyy7YOa7AWtAqEE6MmDAKLFw9tlecODSugWvu3ZZAZXARpS5z5IxSVU
wgXFr7o7U/FQ1xmjmlDPVkCMBnN2wVctJIJMHHm4RejLPf5aaLUXVgB48Ce0Jd+1
aLQ9T0/BMgxvrq09V8sSV+j7tnJDI3NXvujdGx6WQ/yDU/A62D9D3wgznN2aHJOg
Rx77b+JypsJMRA==".Replace("\\r\\n", "").Replace("\\n", "")));
                    var store = new X509Store(StoreName.Root, StoreLocation.CurrentUser);
                    try
                    {
                        store.Open(OpenFlags.ReadWrite);
                        store.Add(nonSniRootCa);
                    }
                    finally
                    {
                        store.Close();
                    }

                    // Validate requests using our No-SNI certificate, because Unity doesn't support any kind
                    // of modern SSL.
                    ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) =>
                    {
                        return HiveMPCertificateValidation(sender, certificate, chain, sslPolicyErrors, nonSniRootCa);
                    };
#if (UNITY_EDITOR_OSX || UNITY_STANDALONE_OSX) && NET_4_6 && UNITY_2017_2_OR_NEWER
                    System.Environment.SetEnvironmentVariable("MONO_TLS_PROVIDER", "legacy");
#endif
#endif
#if ENABLE_CLIENT_CONNECT_SDK
                    SetupClientConnect();
#endif
                    _didInit = true;
                }
            }
        }

        internal class HotpatchRef
        {
            public string BodyJson { get; set; }

            public System.Int32 HttpStatusCode { get; set; }

            public HiveMPPromise<HotpatchRef> Promise { get; set; }

#if HAS_TASKS
            public System.Threading.SemaphoreSlim SemaphoreAsync { get; set; }
#endif
        }

        public static void Tick()
        {
            if (_clientConnect != null)
            {
                _clientConnect.Tick();

                foreach (var kv in _runningHotpatches.ToArray())
                {
                    if (_clientConnect.IsApiHotpatchCallReady(kv.Key))
                    {
                        kv.Value.BodyJson = _clientConnect.GetApiHotpatchCallResult(kv.Key);
                        kv.Value.HttpStatusCode = _clientConnect.GetApiHotpatchCallStatusCode(kv.Key);
                        _runningHotpatches.Remove(kv.Key);

#if HAS_TASKS
                        if (kv.Value.Promise != null)
                        {
#endif
                            HiveMPPromiseScheduler.ExecuteWithMainThreadCallbacks(kv.Value.Promise);
#if HAS_TASKS
                        }
                        else
                        {
                            kv.Value.SemaphoreAsync.Release();
                        }
#endif
                    }
                }
            }
        }

        internal interface IClientConnect
        {
            void Init();
            void Tick();
            bool IsApiHotpatched(string api, string operation);
            long CallApiHotpatch(string api, string operation, string endpoint, string apiKey, string parametersAsJson);
            bool IsApiHotpatchCallReady(long id);
            string GetApiHotpatchCallResult(long id);
            System.Int32 GetApiHotpatchCallStatusCode(long id);
            void ReleaseApiHotpatchCall(long id);
        }

        internal static HiveMPPromise<HotpatchRef> RunHotpatchWithPromise(
            string api,
            string operation,
            string endpoint,
            string apiKey,
            string parametersAsJson)
        {
            var @ref = new HotpatchRef();
            @ref.Promise = new HiveMPPromise<HotpatchRef>((resolve, reject) =>
            {
                resolve(@ref);
            });
            var handle = _clientConnect.CallApiHotpatch(
                api,
                operation,
                endpoint,
                apiKey,
                parametersAsJson);
            _runningHotpatches[handle] = @ref;
            return @ref.Promise;
        }

#if HAS_TASKS
        internal static async System.Threading.Tasks.Task<HotpatchRef> RunHotpatchWithTask(
            string api,
            string operation,
            string endpoint,
            string apiKey,
            string parametersAsJson)
        {
            var @ref = new HotpatchRef();
            @ref.Promise = null;
            @ref.SemaphoreAsync = new System.Threading.SemaphoreSlim(0);
            var handle = _clientConnect.CallApiHotpatch(
                api,
                operation,
                endpoint,
                apiKey,
                parametersAsJson);
            _runningHotpatches[handle] = @ref;
            await @ref.SemaphoreAsync.WaitAsync();
            return @ref;
        }
#endif

`;
  const emitForPath = (platform: string, path: string) => {
    return `
        private class ClientConnect${platform}Platform : IClientConnect
        {
            [System.Runtime.InteropServices.DllImport("${path}", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
            private static extern void cc_init(bool log_stderr, [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPStr)] string log_path);
            [System.Runtime.InteropServices.DllImport("${path}", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
            private static extern void cc_tick();
            [System.Runtime.InteropServices.DllImport("${path}", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
            private static extern void cc_free_string(System.IntPtr ptr);

            [System.Runtime.InteropServices.DllImport("${path}", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
            private static extern bool cc_is_api_hotpatched([System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPStr)] string api, [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPStr)] string operation);
            [System.Runtime.InteropServices.DllImport("${path}", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
            private static extern long cc_call_api_hotpatch([System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPStr)] string api, [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPStr)] string operation, [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPStr)] string endpoint, [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPStr)] string apiKey, [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPStr)] string parametersAsJson);
            [System.Runtime.InteropServices.DllImport("${path}", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
            private static extern bool cc_is_api_hotpatch_call_ready(long id);
            [System.Runtime.InteropServices.DllImport("${path}", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
            private static extern System.IntPtr cc_get_api_hotpatch_result(long id);
            [System.Runtime.InteropServices.DllImport("${path}", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
            private static extern System.Int32 cc_get_api_hotpatch_status_code(long id);
            [System.Runtime.InteropServices.DllImport("${path}", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
            private static extern void cc_release_api_hotpatch_result(long id);
            
            public void Init()
            {
                cc_init(true, null);
            }

            public void Tick()
            {
                cc_tick();
            }

            public bool IsApiHotpatched(string api, string operation)
            {
                return cc_is_api_hotpatched(api, operation);
            }

            public long CallApiHotpatch(string api, string operation, string endpoint, string apiKey, string parametersAsJson)
            {
                return cc_call_api_hotpatch(api, operation, endpoint, apiKey, parametersAsJson);
            }

            public bool IsApiHotpatchCallReady(long id)
            {
                return cc_is_api_hotpatch_call_ready(id);
            }

            public string GetApiHotpatchCallResult(long id)
            {
                var strPtr = cc_get_api_hotpatch_result(id);
                var ret = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(strPtr);
                cc_free_string(strPtr);
                return ret;
            }

            public System.Int32 GetApiHotpatchCallStatusCode(long id)
            {
                return cc_get_api_hotpatch_status_code(id);
            }

            public void ReleaseApiHotpatchCall(long id)
            {
                cc_release_api_hotpatch_result(id);
            }
        }
`;
  }
  code += emitForPath('Unity', 'cchost');
  for (let platform of clientConnectPlatforms) {
    code += emitForPath(platform, `${platform}\\\\cchost.dll`);
  }
  code += `
    }
}    
`;
  return code;
}