export function getPromiseSchedulerSettingsClass(defines: string[]) {
  return `
//------------------------
// <auto-generated>
//     Generated with HiveMP SDK Generator
// </auto-generated>
//------------------------

${defines.join("\n")}

#if UNITY_5 || UNITY_5_3_OR_NEWER
#define IS_UNITY
#endif

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
#if IS_UNITY
using UnityEngine;
#endif

namespace HiveMP.Api
{
    /// <summary>
    /// Configures the scheduler for HiveMP promises.
    /// </summary>
    public class HiveMPPromiseSchedulerSettings
    {
#if !IS_UNITY
        public static Func<object> CoroutineWaitObjectFactory = null;
        public static Action<IEnumerator> ScheduleCoroutine = null;
#endif
    }
}
`;
}

export function getPromiseMainThreadReturnClass(defines: string[]) {
  return `
//------------------------
// <auto-generated>
//     Generated with HiveMP SDK Generator
// </auto-generated>
//------------------------

${defines.join("\n")}

#if UNITY_5 || UNITY_5_3_OR_NEWER
#define IS_UNITY
#endif

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
#if IS_UNITY
using UnityEngine;
#endif

namespace HiveMP.Api
{
    public class HiveMPPromiseMainThreadReturnHandler<T>
    {
        protected Action<T> _resolve;
        protected Action<Exception> _reject;
        protected bool _hasT;
        protected T _t;
        protected Exception _ex;

        public HiveMPPromiseMainThreadReturnHandler(HiveMPPromiseDelegate<T> task, Action<T> resolve, Action<Exception> reject)
        {
            _resolve = resolve;
            _reject = reject;

            StartCoroutine(WaitUntilResult());
            ThreadPool.QueueUserWorkItem(_ =>
            {
                try
                {
                    task((result) =>
                    {
                        _t = result;
                        _hasT = true;
                    }, (ex) =>
                    {
                        _ex = ex;
                    });
                }
                catch (Exception ex)
                {
                    _ex = ex;
                }
            });
        }

        protected static void StartCoroutine(IEnumerator e)
        {
#if IS_UNITY
            HiveMPSDK.GetUnityMonoBehaviour().StartCoroutine(e);
#else
            if (HiveMPPromiseSchedulerSettings.ScheduleCoroutine == null)
            {
                throw new System.InvalidOperationException("Attempted to schedule a coroutine for HiveMP, but HiveMPPromiseSchedulerSettings.ScheduleCoroutine was null!");
            }

            HiveMPPromiseSchedulerSettings.ScheduleCoroutine(e);
#endif
        }

        protected IEnumerator<object> WaitUntilResult()
        {
            do
            {
#if IS_UNITY
                yield return new WaitForFixedUpdate();
#else
                object o;
                if (HiveMPPromiseSchedulerSettings.CoroutineWaitObjectFactory == null)
                {
                    o = new object();
                }
                else
                {
                    o = HiveMPPromiseSchedulerSettings.CoroutineWaitObjectFactory();
                }
                if (o == null)
                {
                    o = new object();
                }
                yield return o;
#endif
            } while (!_hasT && _ex == null);

            if (_hasT)
            {
                _resolve(_t);
            }
            else
            {
                _reject(_ex);
            }
        }
    }
    
    public class HiveMPPromiseMainThreadReturnHandler
    {
        protected Action _resolve;
        protected Action<Exception> _reject;
        protected bool _hasResult;
        protected Exception _ex;

        public HiveMPPromiseMainThreadReturnHandler(HiveMPPromiseDelegate task, Action resolve, Action<Exception> reject)
        {
            _resolve = resolve;
            _reject = reject;

            StartCoroutine(WaitUntilResult());
            ThreadPool.QueueUserWorkItem(_ =>
            {
                try
                {
                    task(() =>
                    {
                        _hasResult = true;
                    }, (ex) =>
                    {
                        _ex = ex;
                    });
                }
                catch (Exception ex)
                {
                    _ex = ex;
                }
            });
        }

        protected static void StartCoroutine(IEnumerator e)
        {
#if IS_UNITY
            HiveMPSDK.GetUnityMonoBehaviour().StartCoroutine(e);
#else
            if (HiveMPPromiseSchedulerSettings.ScheduleCoroutine == null)
            {
                throw new System.InvalidOperationException("Attempted to schedule a coroutine for HiveMP, but HiveMPPromiseSchedulerSettings.ScheduleCoroutine was null!");
            }

            HiveMPPromiseSchedulerSettings.ScheduleCoroutine(e);
#endif
        }

        protected IEnumerator<object> WaitUntilResult()
        {
            do
            {
#if IS_UNITY
                yield return new WaitForFixedUpdate();
#else
                object o;
                if (HiveMPPromiseSchedulerSettings.CoroutineWaitObjectFactory == null)
                {
                    o = new object();
                }
                else
                {
                    o = HiveMPPromiseSchedulerSettings.CoroutineWaitObjectFactory();
                }
                if (o == null)
                {
                    o = new object();
                }
                yield return o;
#endif
            } while (!_hasResult && _ex == null);

            if (_hasResult)
            {
                _resolve();
            }
            else
            {
                _reject(_ex);
            }
        }
    }
}
`;
}

export function getPromiseUnityMonoBehaviourClass(defines: string[]) {
  return `
//------------------------
// <auto-generated>
//     Generated with HiveMP SDK Generator
// </auto-generated>
//------------------------

${defines.join("\n")}

#if UNITY_5 || UNITY_5_3_OR_NEWER
#define IS_UNITY
#endif

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
#if IS_UNITY
using UnityEngine;
#endif

namespace HiveMP.Api
{
#if IS_UNITY
    public class HiveMPUnityMonoBehaviour : MonoBehaviour
    {
        public void Start()
        {
            DontDestroyOnLoad(gameObject);
        }

        public void Update()
        {
            HiveMP.Api.HiveMPSDK.Tick();
        }
    }
#endif
}
`;
}